import json
import os

import 基本信息文档

# from 测试2 import 语言模型
# from 语言模型函数 import 语言模型
from lms语言函数 import 语言模型

from 记忆体 import 记忆图操作函数
from 记忆体.记忆图操作函数 import 检查或加载记忆图


def add_to_chat(role, content):
    消息.append({"role": role, "content": content})


默认信息 = 基本信息文档.人格信息

with open("系统设定.txt", "r", encoding="utf-8") as 文件:
    文件内容 = 文件.read()

系统设定 = 文件内容

if __name__ == "__main__":
    记忆图 = 检查或加载记忆图()

    # 判断是否存在且是文件夹
    if os.path.isfile("记忆体/聊天记录.json"):
        with open("记忆体/聊天记录.json", "r", encoding="utf-8") as file:
            消息 = json.load(file)
            print("读取成功")
    else:
        消息 = [
            {"role": "system", "content": 系统设定},
        ]
    while True:
        # print("当前字数:" + str(记忆图操作函数.计算消息字符数(消息)))
        if 记忆图操作函数.计算消息字符数(消息) >= 30000:
            记忆图 = 记忆图操作函数.更新记忆函数(记忆图, 消息, 使用次数阈值=4, 休眠轮数阈值=30, 删除休眠轮数阈值=20)
            系统设定 = 记忆图操作函数.更新性格与设定(系统设定, 消息)
            消息 = [
                {"role": "system", "content": 系统设定},
            ]
            break
        输入 = input(">>>")
        if 输入 == "/停止":
            break
        if 输入 == "/开始执行记忆整理":
            记忆图 = 记忆图操作函数.更新记忆函数(记忆图, 消息, 使用次数阈值=4, 休眠轮数阈值=30, 删除休眠轮数阈值=20)
            系统设定 = 记忆图操作函数.更新性格与设定(系统设定, 消息)
            消息 = [
                {"role": "system", "content": 系统设定},
            ]
            break

        add_to_chat("user", 输入)

        if "{是}" in 记忆图操作函数.判断是否启用检索记忆(输入, 消息):
            print("启动记忆检索")
            图数组 = 记忆图操作函数.检索图函数(记忆图, 输入, 3, 0.6, 5)
            图数组2 = 记忆图操作函数.检索图函数(记忆图, 语言模型(消息), 3, 0.6, 5)
            提取记忆 = 记忆图操作函数.提取整理记忆(图数组) + 记忆图操作函数.提取整理记忆(图数组2)
        else:
            提取记忆 = "未启用提取记忆功能"

        消息[0]["content"] = (
                系统设定 + "        " +
                "根据检索到的记忆信息RAG：(此检索未触发深层记忆):" + 提取记忆 + "        " +
                "当前时间：" + 记忆图操作函数.获取当前时间() + "        " +
                "临时记忆已使用：" +
                f"{(记忆图操作函数.计算消息字符数(消息) / 30000) * 100:.2f}% (临时记忆满时将触发写入记忆系统)。" +
                "请根据用户需求判断是否启用深层记忆检索（通常在用户要求回忆信息或当前信息不足时触发）。" +
                """如需启用深层记忆，请在回复末尾添加 {{+启动深层记忆(检索深度, "检索词")+}}。""" +
                "检索深度应设置在 10-30 之间，数值越大检索力度越强，同时需指定检索词。" +
                "若用户明确要求启动深层记忆检索，你也需按指令启动。" +
                """(如果用户让你启动链式搜索记忆系统,请将参数调节到50以上,只要是50以上就行,并将检索词直接换成你想要问的问题如{{+启动深层记忆(检索深度, "你想要问的问题")+}},启动链式搜索记忆系统)""" +
                "一般情况下无需启动深层记忆检索,当用户让你仔细回想一个问题时,如果'根据检索到的记忆信息RAG'和聊天记录里都没有,你就可以启动深层记忆检索" +
                """如果用户让你马上记住某个东西,请你启动记忆函数{{+启动记忆函数(0, "需要记忆的内容描述详细一点")+}},"""
        )

        # 调用语言模型生成回复
        输出1 = 语言模型(消息)
        输出2 = 语言模型(消息)

        判断值 = 记忆图操作函数.判断函数(输出1, 输出2, 消息)
        if "回答1" in 判断值:
            输出 = 输出1
            print("选择输出1")
        elif "回答2" in 判断值:
            输出 = 输出2
            print("选择输出2")
        else:
            输出 = 输出1
            print("选择输出1!")

        for 次数 in range(10):
            add_to_chat("assistant", 输出)

            深层记忆 = 记忆图操作函数.检测并执行深层记忆函数(输出, 记忆图)

            if 深层记忆 is not None:
                print("風鈴:" + 输出)
                消息[0]["content"] = (
                        系统设定 + "        " +
                        "根据检索到的记忆信息RAG (此检索已经触发深层记忆检索,你可以自行判断是否继续启动深层检索在没有找到需要记忆的情况下,也可以加大检索力度继续检索):" + 深层记忆 + "        " +
                        "当前时间：" + 记忆图操作函数.获取当前时间() + "        " +
                        "临时记忆已使用：" +
                        f"{(记忆图操作函数.计算消息字符数(消息) / 30000) * 100:.2f}% (临时记忆满时将触发写入记忆系统)。" +
                        "请根据用户需求与现在的信息判断是否再次启用深层记忆检索（通常在用户要求回忆信息或当前信息不足时触发）。" +
                        """如需启用深层记忆，请在回复末尾添加 {{+启动深层记忆(检索深度, "检索词")+}}。""" +
                        "检索深度应设置在 10-30 之间，数值越大检索力度越强，同时需指定检索词。" +
                        """(如果已经尝试5次了,请将参数调节到50以上,只要是50以上就行,并将检索词直接换成你想要问的问题如{{+启动深层记忆(检索深度, "你想要问的问题")+}},因为我会启动链式搜索记忆系统)""" +
                        "你已深层记忆检索:" + str(次数) + "次了,当超过8次后,你应该表示你实在想不起来了,并停止执行深层记忆检索"
                )
                输出 = 语言模型(消息)
            else:
                break

        print("風鈴:" + 输出)
        # 记忆图操作函数.文字转语音(输出)

    记忆图操作函数.保存图为_json(记忆图, "记忆图.pkl")

    folder_path = "记忆体"
    file_path = os.path.join(folder_path, "聊天记录.json")

    # 确保文件夹存在
    os.makedirs(folder_path, exist_ok=True)

    with open("系统设定.txt", "w", encoding="utf-8") as 文件:
        文件.write(系统设定)

    # 保存到文件
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(消息, file, ensure_ascii=False, indent=4)

    print(f"文件已保存到 {file_path}")
